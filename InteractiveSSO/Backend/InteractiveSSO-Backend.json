{
  "openapi": "3.1.0",
  "info": {
    "title": "InteractiveSSO",
    "version": "0.1.0",
    "summary": "InteractiveSSO API Definition",
    "description": "This is the api definition file for InteractivePlus's InteractiveSSO",
    "license": {
      "name": "MIT",
      "identifier": "MIT"
    },
    "contact": {
      "name": "InteractivePlus",
      "url": "https://github.com/InteractivePlus"
    }
  },
  "servers": [
    {
      "url": "https://sso.interactiveplus.org/v1",
      "description": "Mainline"
    }
  ],
  "paths": {
    "/usersystem/users": {
      "post": {
        "summary": "Create New User",
        "tags": [
          "Captcha-Required"
        ],
        "operationId": "create-user",
        "responses": {
          "201": {
            "description": "Register Successful, please help user verify his/her email & phone number   \n\n**Note that emailMethod and phoneMethod will only be sent if email/phone is in the query parameter**",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emailMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    },
                    "phoneMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    },
                    "uid": {
                      "type": [
                        "string",
                        "integer"
                      ],
                      "description": "created UID"
                    }
                  },
                  "required": [
                    "uid"
                  ]
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conflictItems": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "phone",
                          "email",
                          "displayName"
                        ]
                      }
                    }
                  },
                  "required": [
                    "conflictItems"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Try to register new user\n\n---\n\nWill trigger a sending of verification email / sms / phone calls",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "Display Name of the new user"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "New User's Email, either email or phone must be present"
                  },
                  "phone": {
                    "type": "string",
                    "format": "E164",
                    "pattern": "^\\+?[1-9]\\d{1,14}$",
                    "description": "New User's Phone parsed into E164, either email or phone must be present"
                  },
                  "area": {
                    "type": "string",
                    "description": "ISO 3166-1 alpha-2 codes"
                  },
                  "language": {
                    "type": "string",
                    "description": "2 letter ISO 639-1 codes"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of new user",
                    "minLength": 12,
                    "maxLength": 50
                  },
                  "preferredPhoneMethod": {
                    "$ref": "#/components/schemas/CommunicationMethodPhoneOnly"
                  }
                },
                "required": [
                  "displayName",
                  "password"
                ]
              }
            }
          },
          "description": ""
        }
      },
      "parameters": [],
      "get": {
        "summary": "Search Users",
        "operationId": "search-users",
        "responses": {
          "200": {
            "description": "Successful.   \n\n---\n\nNote that permission and setting-wise, if admin mode, it will only display the user's custom settings (some values might be null or empty)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This can be empty tho...if nothing is found",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/BasicUserInfo"
                          },
                          {
                            "$ref": "#/components/schemas/CompleteUserInfo"
                          }
                        ]
                      }
                    },
                    "totalDataCount": {
                      "type": "integer",
                      "description": "Total number of data available given the query limit (ignores the limit and offset parameter)",
                      "minimum": 0
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Gives offset of the current \"data\" field",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "data",
                    "totalDataCount",
                    "offset"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized\n(When client offers no authorization)"
          },
          "403": {
            "description": "Forbidden\n(When credential provided by client does not have admin permission / permission to user to perform this action...)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows user/admins to search users",
        "security": [
          {
            "userToken": []
          },
          {
            "oauth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50
            },
            "in": "query",
            "name": "displayNamePartial",
            "description": "partial display name to be searched (required for normal users)"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "emailPartial",
            "description": "partial email to be searched (only if admin)"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "phonePartial",
            "description": "partial phone number (in E164) to be searched  (only if admin)"
          },
          {
            "schema": {
              "type": "integer",
              "minLength": 0,
              "minimum": 0
            },
            "in": "query",
            "name": "limit",
            "description": "limit on number of results (if empty then there would be no limit for admin or some default limit for normal user)"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "if not set, this would default to 0. Negative values mean query from the back (-1 means start from the last element)"
          },
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "admin",
            "description": "if admin mode is activated for an admin"
          }
        ]
      }
    },
    "/usersystem/users/{uid}": {
      "parameters": [
        {
          "schema": {},
          "name": "uid",
          "in": "path",
          "required": true,
          "description": "int or string"
        }
      ],
      "get": {
        "summary": "Get User Info",
        "tags": [],
        "responses": {
          "200": {
            "description": "**OK**   \n\n1. if not admin mode, and an user/app is reading another user, returns `BasicUserInfo`\n2. if not admin mode, and one user is reading himself, returns `AdvancedUserInfo`\n3. if admin mode, returns `CompleteUserInfo`\n\nNote: If a normal APP tries to read a user, it depends on if during this query the relative oauth token is present or not.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/BasicUserInfo"
                        },
                        {
                          "$ref": "#/components/schemas/AdvancedUserInfo"
                        },
                        {
                          "$ref": "#/components/schemas/CompleteUserInfo"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized\n\n1. Consider Prompt Login\n2. Consider Refresh Token"
          },
          "404": {
            "description": "Not Found (UID not Found)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-user-info",
        "description": "This API lets user/app read info about one specific user",
        "security": [
          {
            "oauth": [
              "basic_info"
            ]
          },
          {
            "userToken": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "admin",
            "description": "if admin mode or not"
          }
        ]
      },
      "patch": {
        "summary": "Edit User Info",
        "operationId": "edit-user-info",
        "responses": {
          "200": {
            "description": "OK\n\n---\n\n1. If normal mode, then `AdvancedUserInfo` will be returned\n2. If admin mode, then `CompleteUserInfo` will be returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AdvancedUserInfo"
                        },
                        {
                          "$ref": "#/components/schemas/CompleteUserInfo"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conflictItems": {
                      "type": "array",
                      "description": "What item is already in the system?",
                      "items": {
                        "type": "string",
                        "enum": [
                          "email",
                          "phone",
                          "displayName"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Edit User Info",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Fields of CompleteUserInfo, see the schema definition for more detail. \nAll fields are optional (but there must be more than 1 fields since we want to change at least one info item).",
                "properties": {
                  "admin": {
                    "type": "boolean",
                    "description": "If admin mode or not",
                    "default": false
                  },
                  "displayName": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "New Display Name of the User"
                  },
                  "signature": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 120,
                    "description": "1. leave empty => no change\n2. field present but value is null => signature emptied\n3. field present and value is string => new signature",
                    "minLength": 1
                  },
                  "area": {
                    "type": "string",
                    "description": "ISO 3166-1 alpha-2 codes",
                    "maxLength": 2,
                    "minLength": 2
                  },
                  "language": {
                    "type": "string",
                    "description": "2 letter ISO 639-1 codes",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "setting": {
                    "$ref": "#/components/schemas/UserSetting"
                  },
                  "permission": {
                    "$ref": "#/components/schemas/UserPermission"
                  },
                  "email": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Only if the requesting user is an admin, null means to clear the user's email.",
                    "format": "email",
                    "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g",
                    "minLength": 3,
                    "maxLength": 50
                  },
                  "phone": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "E164",
                    "pattern": "^\\+?[1-9]\\d{1,14}$",
                    "description": "Only if the requesting user is an admin, null means to clear the user's phone"
                  },
                  "emailVerified": {
                    "type": "boolean",
                    "description": "Only if the requesting user is an admin"
                  },
                  "phoneVerified": {
                    "type": "boolean",
                    "description": "Only if the requesting user is an admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Only if the requesting user is an admin, sets the new password of the user"
                  },
                  "groupId": {
                    "type": "string",
                    "description": "Only if the requesting user is an admin, sets the new groupId of the user"
                  }
                }
              }
            }
          },
          "description": "**Non-Admin Mode(or self-edit)**\n1. Leaving inner object fields of `setting` attribute blank means no change to existing setting item\n2. `permission` field should not be present\n\n---\n\n**Admin Mode**\n\n1. **Setting** field can be omitted to save previous setting object for the specific user. If setting field is present, then there will not be a mask applied to the object, it will be written to the backend exactly as is (there's no option to maintain selected previous setting items unless you explicitly submit a request based on a copy previous setting item).\n2. **Permission** field **may only be present if the operation requester is an admin user/app** and has permission to manage superadmins. Same rule as Setting. It can be omitted to save previous permission object for the specific user. If permission field is present, then there will not be a mask applied to the object, it will be written to the backend exactly as is (there's no option to maintain selected previous permission items unless you explicitly submit a request based on a copy previous permission item).\n\n---\n\n**Normal APP OAuth Token** should not be allowed to do anything.\n"
        },
        "parameters": []
      }
    },
    "/usersystem/users/{uid}/email": {
      "parameters": [
        {
          "schema": {},
          "name": "uid",
          "in": "path",
          "required": true,
          "description": "int or string"
        }
      ],
      "patch": {
        "summary": "Change User Email",
        "operationId": "change-user-email",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict (When the new email is already been used in the system elsewhere)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint accepts a captcha generated by the /usersystem/verification/changeEmail endpoint and changes user's email.   \nIt also **triggers a new verification email to the new email address on success**\n\n---\n\nAdmin Alternatives:\nUse PATCH `/usersystem/users/{uid}` API",
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "format": "email",
                "properties": {
                  "newEmail": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "New Email Address, can be null if the phone number in the account is verified and present."
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "Verification Code"
                  }
                },
                "required": [
                  "newEmail",
                  "verificationCode"
                ]
              }
            }
          }
        }
      }
    },
    "/usersystem/users/{uid}/phone": {
      "parameters": [
        {
          "schema": {},
          "name": "uid",
          "in": "path",
          "required": true,
          "description": "int or string"
        }
      ],
      "patch": {
        "summary": "Change User Phone Number",
        "operationId": "change-user-phone",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneMethod": {
                      "$ref": "#/components/schemas/CommunicationMethodPhoneOnly"
                    }
                  },
                  "required": [
                    "phoneMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict (When the new phone number is already been used in the system elsewhere)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint accepts a captcha generated by the /usersystem/verification/changePhone endpoint and changes user's phone.   \nIt also **triggers a new verification sms / call to the new phone number on success**\n\n---\n\nAdmin Alternatives:\nUse PATCH `/usersystem/users/{uid}` API",
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "E164",
                "type": "object",
                "properties": {
                  "newPhone": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "E164",
                    "pattern": "^\\+?[1-9]\\d{1,14}$",
                    "description": "New Phone Number, can be null if email has been verified and present."
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "Verification Code"
                  }
                },
                "required": [
                  "newPhone",
                  "verificationCode"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/usersystem/users/{account}/password": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "E164/email",
            "pattern": "(^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$)|(^\\+?[1-9]\\d{1,14}$)"
          },
          "name": "account",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Change or Reset Password",
        "operationId": "change-password",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This api allows user to change/reset password with verification code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "verificationCode": {
                    "type": "string",
                    "description": "Verification Code to use"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New password to use"
                  }
                },
                "required": [
                  "verificationCode",
                  "newPassword"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/usersystem/token": {
      "post": {
        "summary": "User Login (Get User Token)",
        "operationId": "user-login",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokenInfo": {
                      "$ref": "#/components/schemas/UserSystemToken"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AdvancedUserInfo"
                    }
                  },
                  "required": [
                    "tokenInfo",
                    "user"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden\n\n---\n\n1. User being forbidden by the system to login (usually set by admin for banning a user)"
          },
          "417": {
            "description": "Expectation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reason": {
                      "type": "string",
                      "enum": [
                        "not-verified-account"
                      ]
                    },
                    "account-info": {
                      "type": "object",
                      "description": "This will only be present if `reason` is `not-verified-account`, this is for use for guiding verification.",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "only given if user has email given during registration.",
                          "format": "email",
                          "minLength": 3,
                          "maxLength": 50,
                          "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g"
                        },
                        "phone": {
                          "type": [
                            "string",
                            "integer"
                          ],
                          "description": "only given if user has phone given during registration.",
                          "format": "E164",
                          "pattern": "^\\+?[1-9]\\d{1,14}$"
                        }
                      }
                    }
                  },
                  "required": [
                    "reason"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Captcha-Required"
        ],
        "description": "This is the API that the frontend interacts with if user chooses to login..",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "string",
                    "description": "either email or phone number",
                    "format": "E164/email",
                    "pattern": "(^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$)|(^\\+?[1-9]\\d{1,14}$)"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the logging user"
                  }
                },
                "required": [
                  "password"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Renew User Token",
        "operationId": "renew-user-token",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokenInfo": {
                      "$ref": "#/components/schemas/UserSystemToken"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AdvancedUserInfo"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "minLength": 256,
                    "maxLength": 256,
                    "description": "Refresh token given during login or previous renew of token"
                  }
                },
                "required": [
                  "refreshToken"
                ]
              }
            }
          }
        },
        "description": "Renew user token. User Client is checked heavily."
      }
    },
    "/usersystem/groups": {
      "get": {
        "summary": "Admin List/Search User Group",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalDataCount": {
                      "type": "integer",
                      "description": "Total number of data available given the query limit (ignores the limit and offset parameter)",
                      "minimum": 0
                    },
                    "offset": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Gives offset of the current \"data\" field"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserGroup"
                      }
                    }
                  },
                  "required": [
                    "totalDataCount",
                    "offset",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "admin-list-user-group",
        "description": "Admin Lists/Searches User Groups",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 20
            },
            "in": "query",
            "name": "displayNamePartial",
            "description": "Partial Display Name to be Searched"
          },
          {
            "schema": {
              "type": "integer",
              "minLength": 0,
              "minimum": 0
            },
            "in": "query",
            "name": "limit",
            "description": "limit on number of results (if empty then there would be no limit for admin or some default limit for normal user)"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "if not set, this would default to 0. Negative values mean query from the back (-1 means start from the last element)"
          }
        ]
      }
    },
    "/usersystem/groups/{groupid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "groupid",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Admin Viewing Group Info",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/UserGroup"
                    }
                  },
                  "required": [
                    "group"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "admin-view-user-group-info",
        "description": "",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ]
      }
    },
    "/usersystem/verification/verifyEmail": {
      "get": {
        "summary": "Verify User Email Address",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User's email, used to display or prompt login?"
                    },
                    "displayName": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 50,
                      "description": "User's display name"
                    }
                  },
                  "required": [
                    "email",
                    "displayName"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden (Verification Code is WRONG)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "verify-user-email",
        "description": "This place is where frontend communicates with the backend...And help verifies user's email using a verificationCode",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 50,
              "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g",
              "format": "email"
            },
            "in": "query",
            "name": "verificationCode",
            "description": "Verification Code to be used",
            "required": true
          }
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Send New Email Verification Code",
        "operationId": "resend-verify-email",
        "responses": {
          "201": {
            "description": "Created (Email sent)"
          },
          "400": {
            "description": "Bad Request (request is bad or the email is already verified, or if the email is not in the system)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Resends the email for the user to verify email (previously-sent verification codes are omitted).",
        "parameters": [],
        "tags": [
          "Captcha-Required"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "Email address that we want to resend to"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        }
      }
    },
    "/usersystem/verification/verifyPhone": {
      "get": {
        "summary": "Verify User Phone Number",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phone": {
                      "type": "string",
                      "description": "User's phone number, used to display or prompt login?",
                      "pattern": "^\\+?[1-9]\\d{1,14}$",
                      "format": "E164"
                    },
                    "displayName": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 50,
                      "description": "User's display name"
                    }
                  },
                  "required": [
                    "phone",
                    "displayName"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden (Verification Code is WRONG)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "verify-user-phone",
        "description": "This place is where frontend communicates with the backend...And help verifies user's phone using a verificationCode",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "verificationCode",
            "description": "verification code to be used",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "E164",
              "pattern": "^\\+?[1-9]\\d{1,14}$"
            },
            "in": "query",
            "name": "phone",
            "required": true,
            "description": "verifying phone"
          }
        ]
      },
      "post": {
        "summary": "Send New Phone Number Verification Code",
        "operationId": "resend-verify-phone",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneMethod": {
                      "$ref": "#/components/schemas/CommunicationMethodPhoneOnly"
                    }
                  },
                  "required": [
                    "phoneMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (request is bad or the phone is already verified, or if the phone is not in the system)"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sent": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This API resends the SMS/Phone Call that verifies the user's phone number (previously sent verification codes will be discarded).",
        "tags": [
          "Captcha-Required"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "phone number to be resent to",
                    "format": "E164",
                    "pattern": "^\\+?[1-9]\\d{1,14}$"
                  },
                  "preferredPhoneMethod": {
                    "$ref": "#/components/schemas/CommunicationMethodPhoneOnly"
                  }
                },
                "required": [
                  "phone"
                ]
              }
            }
          }
        }
      }
    },
    "/usersystem/verification/changeEmail": {
      "post": {
        "summary": "Request ChangeEmail Verification Code",
        "operationId": "request-change-email-vericode",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sentMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    }
                  },
                  "required": [
                    "sentMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This API lets user request a verification code that changes the email of the account",
        "tags": [
          "Captcha-Required"
        ],
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "preferredMethod": {
                    "$ref": "#/components/schemas/CommunicationMethod"
                  }
                }
              }
            }
          },
          "description": "`preferredMethod` Defaults to SMS"
        }
      }
    },
    "/usersystem/verification/changePhone": {
      "post": {
        "summary": "Request Change Phone Verification Code",
        "operationId": "request-change-phone-vericode",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sentMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    }
                  },
                  "required": [
                    "sentMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This API lets user request a verification code that changes the phone of the account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "preferredMethod": {
                    "$ref": "#/components/schemas/CommunicationMethod"
                  }
                }
              }
            }
          },
          "description": "`preferredMethod` defaults to SMS"
        },
        "tags": [
          "Captcha-Required"
        ],
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/usersystem/verification/changePassword": {
      "parameters": [],
      "post": {
        "summary": "Request Reset/Change Password Verification Code",
        "operationId": "request-change-password-vericode",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sentMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    }
                  },
                  "required": [
                    "sentMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden\n\n---\n\nThis happens if the account is blocked, doesn't exist, etc.\n\nIf the account has at least one of phone/email verified, then the communication method that has already been verified will be given priority, instead of sending to the method given in the argument."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint acts as a point to send verification codes to reset or change user password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "string",
                    "format": "E164/email",
                    "pattern": "(^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$)|(^\\+?[1-9]\\d{1,14}$)"
                  },
                  "preferredMethod": {
                    "$ref": "#/components/schemas/CommunicationMethod"
                  }
                },
                "required": [
                  "account"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Captcha-Required"
        ]
      }
    },
    "/usersystem/verification/deleteApp": {
      "post": {
        "summary": "Request Delete/Leave App Verification Code",
        "operationId": "request-delete-app-vericode",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sentMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    }
                  },
                  "required": [
                    "sentMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Captcha-Required"
        ],
        "description": "This endpoint is for app-owner users to request verification codes to delete an owned app.",
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "preferredMethod": {
                    "$ref": "#/components/schemas/CommunicationMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/usersystem/verification/changeAppOwner": {
      "post": {
        "summary": "Request Change APP Owner Verification Code",
        "operationId": "request-change-app-owner-vericode",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sentMethod": {
                      "$ref": "#/components/schemas/CommunicationMethod"
                    }
                  },
                  "required": [
                    "sentMethod"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows app owner to request a change-owner verification code for his/her app",
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "preferredMethod": {
                    "$ref": "#/components/schemas/CommunicationMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appsystem/apps": {
      "post": {
        "summary": "Create New App",
        "operationId": "create-new-app",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "$ref": "#/components/schemas/AdvancedAppInfo"
                    }
                  },
                  "required": [
                    "app"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (If user is forbidden from creating apps)"
          },
          "409": {
            "description": "Conflict (DisplayName already exists in the system)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows users to create new apps",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "description": "new display name for the app"
                  }
                },
                "required": [
                  "displayName"
                ]
              }
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ],
        "tags": [
          "Captcha-Required"
        ]
      },
      "get": {
        "summary": "List/Search Owned Apps / Admin Search Apps",
        "operationId": "admin-search-apps",
        "responses": {
          "200": {
            "description": "OK\n\n---\n\n1. Returns `AdvancedAppInfo` when non-admin mode\n2. Returns `CompleteAppInfo` when admin mode",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/AdvancedAppInfo"
                          },
                          {
                            "$ref": "#/components/schemas/CompleteAppInfo"
                          }
                        ]
                      }
                    },
                    "totalDataCount": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of data available given the query limit (ignores the limit and offset parameter)"
                    },
                    "offset": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Gives offset of the current \"data\" field"
                    }
                  },
                  "required": [
                    "data",
                    "totalDataCount",
                    "offset"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "description": "This entry can only be used by admin user/apps to list or search apps, or normal users to list or search owned/managed apps",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 30
            },
            "in": "query",
            "name": "displayNamePartial",
            "description": "partial display name of app to be searched"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 120
            },
            "in": "query",
            "name": "descriptionPartial",
            "description": "partial description to be searched"
          },
          {
            "schema": {},
            "in": "query",
            "name": "relatedUserUid",
            "description": "string/integer (admin mode only)"
          },
          {
            "schema": {
              "type": "integer",
              "minLength": 0,
              "minimum": 0
            },
            "in": "query",
            "name": "limit",
            "description": "limit on number of results (if empty then there would be no limit)"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "if not set, this would default to 0. Negative values mean query from the back (-1 means start from the last element)"
          },
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "admin",
            "description": "If admin mode or not"
          }
        ]
      }
    },
    "/appsystem/apps/{appid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "appid",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get App Info",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK\n\n---\n\n1. Returns `BasicAppInfo` if one unrelated user is querying about this app\n2. Returns `AdvancedAppInfo` if the user is manager of this app or if the app is querying about itself\n3. Returns `CompleteAppInfo` if it is an admin query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/BasicAppInfo"
                        },
                        {
                          "$ref": "#/components/schemas/AdvancedAppInfo"
                        },
                        {
                          "$ref": "#/components/schemas/CompleteAppInfo"
                        }
                      ]
                    }
                  },
                  "required": [
                    "app"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-app-info",
        "description": "This endpoint is used by admin users/apps and normal users to read about a specific app, or for the app to read itself",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "admin",
            "description": "if admin mode or not"
          }
        ]
      },
      "patch": {
        "summary": "Edit App Info",
        "operationId": "edit-app-info",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows admin users/apps and normal users to edit information about an app",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean",
                    "description": "If admin mode is enabled or not",
                    "default": false
                  },
                  "displayName": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "description": "If present, would be the new displayName of the app"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 120,
                    "description": "If present, would be the new description of the app"
                  },
                  "rerollSecret": {
                    "type": "boolean",
                    "default": false,
                    "description": "If the app's appSecret should be rerolled"
                  },
                  "setting": {
                    "$ref": "#/components/schemas/AppSetting"
                  },
                  "ownerUid": {
                    "type": [
                      "string",
                      "integer"
                    ],
                    "description": "Only if admin mode, new ownerUid of this app"
                  },
                  "managerUidList": {
                    "type": "array",
                    "description": "Only if admin mode, new list of managers uids that are currently managing this app",
                    "items": {
                      "type": [
                        "string",
                        "integer"
                      ]
                    }
                  },
                  "pendingManagerUidList": {
                    "type": "array",
                    "description": "Only if admin mode, new list of manager uids that have not accepted the invitation to manage this app",
                    "items": {
                      "type": [
                        "string",
                        "integer"
                      ]
                    }
                  },
                  "permission": {
                    "$ref": "#/components/schemas/AppPermission"
                  },
                  "groupId": {
                    "type": [
                      "string",
                      "integer"
                    ],
                    "description": "Only if admin mode, new groupId for this app"
                  }
                }
              }
            }
          },
          "description": "**Non-Admin Mode(or self-edit)**\n1. Leaving inner object fields of `setting` attribute blank means no change to existing setting item\n2. `permission` field should not be present\n\n---\n\n**Admin Mode**\n\n1. **Setting** field can be omitted to save previous setting object for the specific app. If setting field is present, then there will not be a mask applied to the object, it will be written to the backend exactly as is (there's no option to maintain selected previous setting items unless you explicitly submit a request based on a copy previous setting item).\n2. **Permission** field **may only be present if the operation requester is an admin user/app** and has permission to manage superadmins. Same rule as Setting. It can be omitted to save previous permission object for the specific user. If permission field is present, then there will not be a mask applied to the object, it will be written to the backend exactly as is (there's no option to maintain selected previous permission items unless you explicitly submit a request based on a copy previous permission item).\n\n---\n\n**Normal APP OAuth Token** should not be allowed to do anything."
        }
      },
      "delete": {
        "summary": "Delete App",
        "operationId": "delete-app",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Used by admins or app owners to delete an app, or app managers to leave app.",
        "security": [
          {
            "userToken": []
          },
          {
            "oauth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean",
                    "default": false,
                    "description": "If admin mode or not"
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "Required if non-admin mode (and the user is required to be the owner/manager of the deleting/leaving app)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appsystem/apps/{appid}/managers": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "appid",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Invite User to Manage App / Accept App Invitation",
        "operationId": "invite-app-manager",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "$ref": "#/components/schemas/AdvancedAppInfo"
                    }
                  },
                  "required": [
                    "app"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint is for app owners to invite new managers to the list, or for user being invited to join the manager list.\n\nFor admin users/apps, use PATCH `/appsystem/apps/{appid}`",
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newManagerUid": {
                    "type": [
                      "string",
                      "integer"
                    ],
                    "description": "Required and only used if inviting new user to the app(If accepting invitation, just leave this empty). Uid of the new manager"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete User from Manager List",
        "operationId": "delete-app-manager",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found (Manager not found in the manager list)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint is for app owners to delete managers from the managing list\n\nFor admin users/apps, use PATCH `/appsystem/apps/{appid}`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "managerUid": {
                    "type": [
                      "string",
                      "integer"
                    ],
                    "description": "uid of the manager being removed"
                  }
                },
                "required": [
                  "managerUid"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/appsystem/apps/{appid}/owner": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "appid",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Transfer APP Ownership",
        "operationId": "patch-appsystem-apps-appid-owner",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "$ref": "#/components/schemas/AdvancedAppInfo"
                    }
                  },
                  "required": [
                    "app"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows an app-owner to transfer app ownership to a manager. The manager will be swapped to be the owner and the previous owner will be swapped to be a manager.\n\nAdmin Alternative: `PATCH` `/appsystem/apps/{appid}`",
        "security": [
          {
            "userToken": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": [
                  "string",
                  "integer"
                ],
                "description": "uid of the new owner, must be in the non-pending manager list."
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "verificationCode",
            "description": "Verification code by `/usersystem/verification/changeAppOwner`",
            "required": true
          }
        ]
      }
    },
    "/appsystem/groups": {
      "get": {
        "summary": "Admin List / Search Application Groups",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalDataCount": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of data available given the query limit (ignores the limit and offset parameter)"
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Gives offset of the current \"data\" field",
                      "minimum": 0
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AppGroup"
                      }
                    }
                  },
                  "required": [
                    "totalDataCount",
                    "offset",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "admin-list-app-groups",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 20
            },
            "in": "query",
            "name": "displayNamePartial",
            "description": "Partial Display Name to be Searched"
          },
          {
            "schema": {
              "type": "integer",
              "minLength": 0,
              "minimum": 0
            },
            "in": "query",
            "name": "limit",
            "description": "limit on number of results (if empty then there would be no limit for admin or some default limit for normal user)"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "if not set, this would default to 0. Negative values mean query from the back (-1 means start from the last element)"
          }
        ]
      }
    },
    "/appsystem/groups/{groupid}": {
      "get": {
        "summary": "Admin Read Application Group Info",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/AppGroup"
                    }
                  },
                  "required": [
                    "group"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "admin-view-app-group-info",
        "description": "",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "groupid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/authorizations": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OAuthRecord"
                      }
                    },
                    "totalDataCount": {
                      "type": "integer",
                      "description": "Total number of data available given the query limit (ignores the limit and offset parameter)"
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Gives offset of the current \"data\" field"
                    }
                  },
                  "required": [
                    "data",
                    "totalDataCount",
                    "offset"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "list-authorization-records",
        "description": "This endpoints lets an admin list all authorizations of specific user/app.\n\nOr lets a normal user/app list authorized/granted authorizations.",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "admin",
            "description": "If admin mode or not"
          },
          {
            "schema": {},
            "in": "query",
            "name": "uid",
            "description": "int/string, used and optional if admin mode"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appId",
            "description": "used and optional if admin mode"
          },
          {
            "schema": {
              "type": "integer",
              "minLength": 0,
              "minimum": 0
            },
            "in": "query",
            "name": "limit",
            "description": "limit on number of results (if empty then there would be no limit)"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "if not set, this would default to 0. Negative values mean query from the back (-1 means start from the last element)"
          }
        ]
      }
    },
    "/authorizations/authcode": {
      "post": {
        "summary": "Generate New Authorization Code for OAuth2",
        "operationId": "new-authorization-code-oauth2",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization": {
                      "$ref": "#/components/schemas/OAuthRecord"
                    },
                    "code": {
                      "type": "string",
                      "description": "authorization code",
                      "minLength": 32,
                      "maxLength": 32
                    },
                    "expiresIn": {
                      "type": "integer",
                      "description": "in seconds"
                    }
                  },
                  "required": [
                    "authorization",
                    "code",
                    "expiresIn"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden\n\n(If the authorization record is frozen, or if the app is not allowed to use some of the scopes)\n\n---\n\nthe authorization field will be present only if the record is frozen by admin or by the app.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization": {
                      "$ref": "#/components/schemas/OAuthRecord"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found\n\n---\n\nThis means authorization code not present. It should never happen since frontend have to always call `PUT /authorizations/{appid}/{uid}`"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint is accessed by the frontend at endpoint `/oauth2/authorize`, after the frontend has created/edited an authorization record using `PUT /authorizations/{appid}/{uid}`, it should call this API to create an authorization code to return to the URL callback.\n\nLots of parameters should just be passed directly from frontend except for `scope`.",
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "scope",
            "description": "Scopes. Optional in the specification, if omitted this will be set to basic_info",
            "style": "spaceDelimited"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appId",
            "required": true,
            "description": "appId(parameter client_id) of the authorizing app"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "redirect_uri",
            "description": "URL to be called back if the authorization was successful (or unsuccessful). "
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "code_challenge",
            "description": "Required if using PKCE https://datatracker.ietf.org/doc/html/rfc7636#section-4"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "plain",
                "S256"
              ]
            },
            "in": "query",
            "name": "code_challenge_method",
            "description": "Defaults to plain if this field is not set but `code_challenge` is set"
          }
        ],
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/authorizations/{appid}/{uid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "appid",
          "in": "path",
          "required": true
        },
        {
          "schema": {},
          "name": "uid",
          "in": "path",
          "required": true,
          "description": "int/string"
        }
      ],
      "get": {
        "summary": "Read Specific User-App OAuth Record",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization": {
                      "$ref": "#/components/schemas/OAuthRecord"
                    }
                  },
                  "required": [
                    "authorization"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-oauth2-app-user-authorization-info",
        "description": "This endpoint is for normal user / normal app or admin to read about a specific user-app `authorization_code` authorization record.",
        "security": [
          {
            "oauth": []
          },
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "summary": "Add/Edit User-App OAuth Record",
        "operationId": "add-edit-oauth-user-app-authorization",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization": {
                      "$ref": "#/components/schemas/OAuthRecord"
                    }
                  },
                  "required": [
                    "authorization"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization": {
                      "$ref": "#/components/schemas/OAuthRecord"
                    }
                  },
                  "required": [
                    "authorization"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows Frontend (on behalf of an normal user) at the endpoint `/oauth2/authorization` to communicate with the backend and establish new/edit old authorization towards an app.\n\nIt can also be used for an admin to create/edit authorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "type": "array",
                    "description": "ommiting this field will write scope to empty.",
                    "items": {
                      "$ref": "#/components/schemas/OAuthScope"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userToken": []
          },
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete User/App OAuth Record",
        "operationId": "delete-oauth-user-app-authorization",
        "responses": {
          "200": {
            "description": "OK (Freeze successful)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorization": {
                      "$ref": "#/components/schemas/OAuthRecord"
                    }
                  },
                  "required": [
                    "authorization"
                  ]
                }
              }
            }
          },
          "204": {
            "description": "No Content (Delete Successful)"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "This endpoint allows Frontend (on behalf of an normal user) to communicate with the backend and establish new/edit old authorization towards an app.\nThis endpoint can also be used by apps to freeze/delete an authorization.\n\nIt can also be used for an admin to freeze/delete authorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "freeze": {
                    "type": "boolean",
                    "default": false,
                    "description": "If freezing or deleting the record, this can only be false for normal-user-based query"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/authorize": {
      "get": {
        "summary": "OAuth2 Authorize Prompt Page",
        "tags": [],
        "operationId": "get-oauth2-authorize",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            },
            "in": "query",
            "name": "response_type",
            "required": true,
            "description": "What type of grant is this?"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "state",
            "description": "Recommended. An opaque value used by the client to maintain state between the request and callback."
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "scope",
            "description": "Scopes. Optional in the specification, if omitted this will be set to basic_info",
            "style": "spaceDelimited"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "client_id",
            "required": true,
            "description": "client_id (appId) of the authorizing app"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "redirect_uri",
            "description": "URL to be called back if the authorization was successful (or unsuccessful). "
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "code_challenge",
            "description": "Required if using PKCE https://datatracker.ietf.org/doc/html/rfc7636#section-4"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "plain",
                "S256"
              ]
            },
            "in": "query",
            "name": "code_challenge_method",
            "description": "Defaults to plain if this field is not set but `code_challenge` is set"
          }
        ],
        "description": "This would actually be a frontend webpage since it is where apps direct their clients to...   \nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1",
        "responses": {
          "200": {
            "description": "Note that this would not be the page result, just parameters redirected for the callback\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2\n   \n**Body fields** will actually be GET parameters in the called back URL",
            "headers": {},
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Returned authroization code (In SSO service, the code is set to 32 in length)",
                      "minLength": 32,
                      "maxLength": 32
                    },
                    "state": {
                      "type": "string",
                      "description": "Required if a \"state\" parameter was present in the client authorization request."
                    }
                  },
                  "required": [
                    "code"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Note that this would not be the page result, just parameters redirected for the callback\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2.1   \n**Body fields** will actually be GET parameters in the called back URL",
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_request",
                        "unauthorized_client",
                        "access_denied",
                        "unsupported_response_type",
                        "invalid_scope",
                        "server_error",
                        "temporarily_unavailable"
                      ],
                      "description": "A single ASCII [USASCII] error code"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Human-readable ASCII [USASCII] text providing additional information"
                    },
                    "error_uri": {
                      "type": "string",
                      "description": "A URI identifying a human-readable web page with \ninformation about the error, used to provide the client developer with additional information about the error."
                    },
                    "state": {
                      "type": "string",
                      "description": "Required if a \"state\" parameter was present in the client authorization request."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "summary": "Get OAuth2 Access Token",
        "operationId": "post-oauth2-token",
        "responses": {
          "200": {
            "description": "OK\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-5.1",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "maxLength": 64,
                      "minLength": 64
                    },
                    "token_type": {
                      "type": "string",
                      "enum": [
                        "bearer"
                      ]
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "in seconds",
                      "minimum": 0
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "optional in the specs, but will definitely be given in SSO service. Refresh_token will not be given if the token is granted by client credentials.",
                      "minLength": 128,
                      "maxLength": 128
                    },
                    "scope": {
                      "type": "array",
                      "description": "optional in the specs, and if it is authorized to be empty then it would be empty(nothing about the user would be reveled and the app will only be able to differentiate different users based on uid).",
                      "items": {
                        "$ref": "#/components/schemas/OAuthScope"
                      }
                    }
                  },
                  "required": [
                    "access_token",
                    "token_type",
                    "expires_in"
                  ]
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-5.2",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_request",
                        "invalid_client",
                        "invalid_grant",
                        "unauthorized_client",
                        "unsupported_grant_type",
                        "invalid_scope"
                      ],
                      "description": "A single ASCII [USASCII] error code"
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Human-readable ASCII [USASCII] text providing additional information"
                    },
                    "error_uri": {
                      "type": "string",
                      "description": "A URI identifying a human-readable web page with \ninformation about the error, used to provide the client developer with additional information about the error."
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "authorization_code",
                      "client_credentials",
                      "refresh_token"
                    ]
                  },
                  "code": {
                    "type": "string",
                    "description": "Required when grant_type is `authorization_code`, authorization code received, ",
                    "minLength": 24,
                    "maxLength": 24
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Required if the \"redirect_uri\" parameter was included in the authorization request and the grant_type is `authorization_code`, and their values MUST be identical."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "client_id of the authorizing APP"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "required if PKCE is not involved(`grant_type` is `client_credentials` or server side involved auth code grant)"
                  },
                  "scope": {
                    "type": "array",
                    "description": "Scopes. This will only be considered if `grant_type` is`refresh_token`. \nOptional in the specification.\nIf using `client_credentials`, we don't have specific scopes to set because permission control is integrated into the app system, you can leave this blank.\nIf using `refresh_token`, the new scopes should not exceed what previous grant had given, and omitting means to maintain the original scopes.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "code_verifier": {
                    "type": "string",
                    "description": "required if the authorization grant is done using AuthCode PKCE \nhttps://datatracker.ietf.org/doc/html/rfc7636#section-4.5"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "required when `grant_type` is `refresh_token`.\nNote that refresh_token will be checked the identity of the client to avoid misuse."
                  }
                },
                "required": [
                  "grant_type",
                  "client_id"
                ]
              }
            }
          },
          "description": ""
        },
        "description": "This is a backend API that lets third-party clients get their oauth token.\n\n---\n\n> Note: If using `grant_type` = `client_credentials`, there will not be any record to query or search later on, it might actually not be put into the database. Otherwise the authorization records are supposed to be created by SSO frontend and can be checked via `GET` `/authorizations/{appid}/{uid}` endpoint."
      }
    },
    "/oauth2/info": {
      "get": {
        "summary": "Get OAuth2 Token Info",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "client_credentials",
                        "authorization_code"
                      ]
                    },
                    "PKCE": {
                      "type": "boolean",
                      "description": "Only present if `grant_type` is `authorization_code`, tells if the authorization is done using PKCE or appSecret-involved authorization code exchange."
                    },
                    "uid": {
                      "type": [
                        "string",
                        "integer"
                      ],
                      "description": "Present if `grant_type` is `client_credentials`"
                    }
                  },
                  "required": [
                    "grant_type"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-oauth2-info",
        "description": "Get OAuth2 Token Info",
        "security": [
          {
            "oauth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AdminPermissionItems": {
        "title": "AdminPermissionItems",
        "type": "object",
        "description": "Permission items for admin User/APPs",
        "properties": {
          "canManageNormalUser": {
            "type": "boolean",
            "description": "True if this user can manage/edit other normal users"
          },
          "canManageNormalAdmin": {
            "description": "True if this person can manage normal admins",
            "type": "boolean"
          },
          "canManageSuperAdmin": {
            "type": "boolean",
            "description": "True if this person can manage superadmins"
          },
          "canManageNormalApp": {
            "type": "boolean",
            "description": "true if this user can manage all normal apps"
          },
          "canManageOfficialApp": {
            "type": "boolean",
            "description": "true if this user can manage official apps by InteractivePlus"
          }
        }
      },
      "AdminPermissionItemsSolid": {
        "title": "AdmissionPermissionItemsSolid",
        "description": "Solid permission items for admin User/APPs",
        "allOf": [
          {
            "$ref": "#/components/schemas/AdminPermissionItems"
          },
          {
            "type": "object",
            "required": [
              "canManageNormalUser",
              "canManageNormalAdmin",
              "canManageSuperAdmin",
              "canManageNormalApp",
              "canManageOfficialApp"
            ]
          }
        ]
      },
      "BasicUserInfo": {
        "title": "BasicUserInfo",
        "type": "object",
        "description": "Basic User Model (A user read by other user/app)",
        "properties": {
          "uid": {
            "type": [
              "string",
              "integer"
            ],
            "description": "Unique identifier for the given user.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "User's display name",
            "minLength": 3,
            "maxLength": 50
          },
          "signature": {
            "type": [
              "string",
              "null"
            ],
            "description": "User's Signature",
            "minLength": 1,
            "maxLength": 120
          },
          "area": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 codes",
            "maxLength": 2,
            "minLength": 2
          },
          "language": {
            "type": "string",
            "description": "2 letter ISO 639-1 codes",
            "minLength": 2,
            "maxLength": 2
          }
        },
        "required": [
          "uid",
          "displayName",
          "signature",
          "area",
          "language"
        ]
      },
      "AdvancedUserInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 3,
                "maxLength": 50,
                "description": "User's email",
                "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g"
              },
              "phone": {
                "type": "string",
                "description": "User's phone number (E164)",
                "pattern": "^\\+?[1-9]\\d{1,14}$",
                "format": "E164"
              },
              "emailVerified": {
                "type": "boolean",
                "description": "Set to true if the user's email has been verified."
              },
              "phoneVerified": {
                "type": "boolean",
                "description": "Set to true if the user's phone has been verified"
              },
              "lastLoginIP": {
                "type": "string",
                "format": "ip address",
                "description": "IP Address (V4/V6) of the last user login"
              },
              "lastLoginTime": {
                "type": "integer",
                "description": "UTC Timestamp since EPOCH",
                "format": "int32"
              },
              "registerIP": {
                "type": "string",
                "format": "ip address",
                "description": "IP Address (V4 or V6) of user registration"
              },
              "registerTime": {
                "type": "integer",
                "format": "int32",
                "description": "UTC Timestamp since EPOCH"
              },
              "permission": {
                "$ref": "#/components/schemas/UserPermissionSolid"
              },
              "setting": {
                "$ref": "#/components/schemas/UserSettingSolid"
              }
            },
            "required": [
              "email",
              "phone",
              "emailVerified",
              "phoneVerified",
              "lastLoginIP",
              "lastLoginTime",
              "registerIP",
              "registerTime",
              "permission",
              "setting"
            ]
          }
        ],
        "title": "AdvancedUserInfo",
        "description": "Advanced Info about user, usually when user querys about him/herself"
      },
      "CompleteUserInfo": {
        "title": "CompleteUserInfo",
        "description": "Usually only returned by Admin APIs",
        "examples": [],
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          {
            "type": "object",
            "properties": {
              "groupId": {
                "type": [
                  "string",
                  "integer"
                ],
                "description": "The groupId that this user belongs to"
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 3,
                "maxLength": 50,
                "description": "User's email",
                "pattern": "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/g"
              },
              "phone": {
                "type": "string",
                "description": "User's phone number (E164)",
                "pattern": "^\\+?[1-9]\\d{1,14}$",
                "format": "E164"
              },
              "emailVerified": {
                "type": "boolean",
                "description": "Set to true if the user's email has been verified."
              },
              "phoneVerified": {
                "type": "boolean",
                "description": "Set to true if the user's phone has been verified"
              },
              "lastLoginIP": {
                "type": "string",
                "format": "ip address",
                "description": "IP Address (V4/V6) of the last user login"
              },
              "lastLoginTime": {
                "type": "integer",
                "description": "UTC Timestamp since EPOCH",
                "format": "int32"
              },
              "registerIP": {
                "type": "string",
                "format": "ip address",
                "description": "IP Address (V4 or V6) of user registration"
              },
              "registerTime": {
                "type": "integer",
                "format": "int32",
                "description": "UTC Timestamp since EPOCH"
              },
              "passwordHash": {
                "type": "string",
                "format": "password",
                "description": "Hashed Password (Length and format depends on implementation)"
              },
              "permission": {
                "$ref": "#/components/schemas/UserPermission"
              },
              "setting": {
                "$ref": "#/components/schemas/UserSetting"
              }
            },
            "required": [
              "groupId",
              "email",
              "phone",
              "emailVerified",
              "phoneVerified",
              "lastLoginIP",
              "lastLoginTime",
              "registerIP",
              "registerTime",
              "passwordHash",
              "permission",
              "setting"
            ]
          }
        ]
      },
      "UserRole": {
        "type": "integer",
        "title": "UserRole",
        "enum": [
          0,
          1,
          2
        ],
        "description": "0 = Normal, 1 = Normal Admin, 2 = Super Admin"
      },
      "UserPermission": {
        "title": "UserPermission",
        "type": "object",
        "description": "Permission object for users, in a inheritance-allowed format (empty values)",
        "properties": {
          "canLogin": {
            "type": "boolean",
            "description": "True if this user can be logged in normally if it is a valid user (any email or phone is verified)"
          },
          "forceChangePassword": {
            "type": "boolean",
            "description": "Force user to change password next time he/she logs in?"
          },
          "canManageSecurity": {
            "type": "boolean",
            "description": "True if the user can change his/her password, email, etc."
          },
          "canCreateApp": {
            "type": "boolean",
            "description": "True if the user can create new APP"
          },
          "canManageApp": {
            "type": "boolean",
            "description": "true if this user can modify/manage his/her owned or managed apps"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "admin": {
            "$ref": "#/components/schemas/AdminPermissionItems"
          }
        }
      },
      "UserPermissionSolid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserPermission"
          },
          {
            "type": "object",
            "required": [
              "canLogin",
              "forceChangePassword",
              "canManageSecurity",
              "canCreateApp",
              "canManageApp",
              "role",
              "admin"
            ],
            "properties": {
              "admin": {
                "$ref": "#/components/schemas/AdminPermissionItemsSolid"
              }
            }
          }
        ]
      },
      "UserCommunicationSettingItems": {
        "title": "UserCommunicationSettingItems",
        "type": "object",
        "properties": {
          "official": {
            "type": "boolean",
            "description": "official communication through a certain channel"
          },
          "oauth": {
            "type": "boolean",
            "description": "3rd-party communication through a certain channel"
          }
        }
      },
      "UserCommunicationSettingItemsSolid": {
        "title": "UserCommunicationSettingItemsSolid",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserCommunicationSettingItems"
          },
          {
            "type": "object",
            "required": [
              "official",
              "oauth"
            ]
          }
        ]
      },
      "UserSetting": {
        "title": "UserSetting",
        "type": "object",
        "description": "Settings posed by user, in a inheritance-allowed format (empty values)",
        "properties": {
          "communication": {
            "type": "object",
            "description": "communication settings",
            "properties": {
              "email": {
                "$ref": "#/components/schemas/UserCommunicationSettingItems"
              },
              "sms": {
                "$ref": "#/components/schemas/UserCommunicationSettingItems"
              },
              "call": {
                "$ref": "#/components/schemas/UserCommunicationSettingItems"
              }
            }
          }
        }
      },
      "UserSettingSolid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserSetting"
          },
          {
            "type": "object",
            "required": [
              "communication"
            ],
            "properties": {
              "communication": {
                "type": "object",
                "required": [
                  "email",
                  "sms",
                  "call"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/UserCommunicationSettingItemsSolid"
                  },
                  "sms": {
                    "$ref": "#/components/schemas/UserCommunicationSettingItemsSolid"
                  },
                  "call": {
                    "$ref": "#/components/schemas/UserCommunicationSettingItemsSolid"
                  }
                }
              }
            }
          }
        ],
        "title": "",
        "description": ""
      },
      "UserGroup": {
        "title": "UserGroup",
        "type": "object",
        "description": "Group Container for Users",
        "properties": {
          "groupId": {
            "type": [
              "string",
              "integer"
            ],
            "description": "GroupID by this group"
          },
          "displayName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20,
            "description": "Group display name"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 120,
            "description": "Group's Description"
          },
          "permission": {
            "$ref": "#/components/schemas/UserPermission"
          },
          "setting": {
            "$ref": "#/components/schemas/UserSetting"
          }
        },
        "required": [
          "groupId",
          "displayName",
          "description",
          "permission",
          "setting"
        ]
      },
      "BasicAppInfo": {
        "title": "BasicAppInfo",
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": "appid of the APP"
          },
          "displayName": {
            "type": "string",
            "minLength": 3,
            "description": "display name of this app.",
            "maxLength": 30
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 120,
            "description": "description of this app."
          }
        },
        "required": [
          "appId",
          "displayName",
          "description"
        ]
      },
      "AdvancedAppInfo": {
        "title": "AdvancedAppInfo",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAppInfo"
          },
          {
            "type": "object",
            "properties": {
              "appSecret": {
                "type": "string",
                "description": "Secret for the app, acts like the password for API authentication"
              },
              "ownerUid": {
                "type": [
                  "string",
                  "integer"
                ],
                "description": "User UID of the owner of this APP"
              },
              "managerUidList": {
                "type": "array",
                "description": "List of managers uids that are currently managing this app",
                "items": {
                  "type": [
                    "string",
                    "integer"
                  ]
                }
              },
              "pendingManagerUidList": {
                "type": "array",
                "description": "List of manager uids that have not accepted the invitation to manage this app",
                "items": {
                  "type": [
                    "string",
                    "integer"
                  ]
                }
              },
              "permission": {
                "$ref": "#/components/schemas/AppPermissionSolid"
              },
              "setting": {
                "$ref": "#/components/schemas/AppSettingSolid"
              }
            },
            "required": [
              "appSecret",
              "ownerUid",
              "managerUidList",
              "pendingManagerUidList",
              "permission",
              "setting"
            ]
          }
        ]
      },
      "CompleteAppInfo": {
        "title": "CompleteAPPInfo",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAppInfo"
          },
          {
            "type": "object",
            "properties": {
              "groupId": {
                "type": [
                  "string",
                  "integer"
                ],
                "description": "The groupId that this app belongs to"
              },
              "appSecret": {
                "type": "string",
                "description": "Secret for the app, acts like the password for API authentication"
              },
              "ownerUid": {
                "type": [
                  "string",
                  "integer"
                ],
                "description": "User UID of the owner of this APP"
              },
              "managerUidList": {
                "type": "array",
                "description": "List of managers uids that are currently managing this app",
                "items": {
                  "type": [
                    "string",
                    "integer"
                  ]
                }
              },
              "pendingManagerUidList": {
                "type": "array",
                "description": "List of manager uids that have not accepted the invitation to manage this app",
                "items": {
                  "type": [
                    "string",
                    "integer"
                  ]
                }
              },
              "permission": {
                "$ref": "#/components/schemas/AppPermission"
              },
              "setting": {
                "$ref": "#/components/schemas/AppSetting"
              }
            },
            "required": [
              "groupId",
              "appSecret",
              "ownerUid",
              "managerUidList",
              "pendingManagerUidList",
              "permission",
              "setting"
            ]
          }
        ]
      },
      "AppRole": {
        "type": "integer",
        "title": "APPRole",
        "enum": [
          0,
          1
        ],
        "description": "0 = Normal App, 1 = Official App"
      },
      "AppPermission": {
        "title": "APPPermission",
        "type": "object",
        "description": "Note: One APP will only have ONE authorization record with one user (but with multiple access tokens), old authorization will be used when new authorization/permission is granted",
        "properties": {
          "allowedScopes": {
            "type": "array",
            "description": "Allowed scopes to have, empty means to inherit from parent level",
            "items": {
              "$ref": "#/components/schemas/OAuthScope"
            }
          },
          "allowedExchangeMethods": {
            "type": "object",
            "description": "allowed exchange methods",
            "properties": {
              "PKCE": {
                "type": "boolean",
                "description": "true if client side PKCE exchange method is allowed"
              },
              "authCode": {
                "type": "boolean",
                "description": "True if server side involved auth code exchange is allowed"
              },
              "clientCredential": {
                "type": "boolean",
                "description": "True if server-to-server appsecret exchange is allowed"
              }
            }
          },
          "role": {
            "$ref": "#/components/schemas/AppRole"
          },
          "admin": {
            "$ref": "#/components/schemas/AdminPermissionItems"
          }
        }
      },
      "AppPermissionSolid": {
        "title": "APPPermissionSolid",
        "allOf": [
          {
            "$ref": "#/components/schemas/AppPermission"
          },
          {
            "type": "object",
            "properties": {
              "allowedExchangeMethods": {
                "type": "object",
                "required": [
                  "PKCE",
                  "authCode",
                  "clientCredential"
                ]
              },
              "admin": {
                "$ref": "#/components/schemas/AdminPermissionItemsSolid"
              }
            },
            "required": [
              "allowedExchangeMethods",
              "admin",
              "role"
            ]
          }
        ]
      },
      "AppSetting": {
        "title": "APPSetting",
        "type": "object",
        "description": "Settings for apps",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If this app is enabled"
          },
          "isCallBackValidatorRegex": {
            "type": "boolean",
            "description": "Specifies if the callback validator property contains a regex or string(exact match)"
          },
          "callbackValidator": {
            "type": [
              "string",
              "null"
            ],
            "description": "contains regex/exact string validator for callback url. Null means no check"
          },
          "enabledExchangeMethods": {
            "type": "object",
            "description": "Enabled exchange methods, has to be allowed in permission",
            "properties": {
              "PKCE": {
                "type": "boolean",
                "description": "true if client side PKCE Authcode exchange method is enabled"
              },
              "authCode": {
                "type": "boolean",
                "description": "true if server side Authcode exchange method is enabled"
              },
              "clientCredential": {
                "type": "boolean",
                "description": "true if server-to-server appsecret exchange method is enabled"
              }
            }
          }
        }
      },
      "AppSettingSolid": {
        "title": "AppSettingSolid",
        "allOf": [
          {
            "$ref": "#/components/schemas/AppSetting"
          },
          {
            "type": "object",
            "required": [
              "enabled",
              "isCallBackValidatorRegex",
              "callbackValidator",
              "enabledExchangeMethods"
            ],
            "properties": {
              "enabledExchangeMethods": {
                "type": "object",
                "required": [
                  "PKCE",
                  "authCode",
                  "clientCredential"
                ]
              }
            }
          }
        ]
      },
      "AppGroup": {
        "title": "APPGroup",
        "type": "object",
        "description": "Group Container for Apps",
        "properties": {
          "groupId": {
            "type": [
              "string",
              "integer"
            ],
            "description": "GroupID by this group"
          },
          "displayName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20,
            "description": "Group display name"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 120,
            "description": "Group's Description"
          },
          "permission": {
            "$ref": "#/components/schemas/AppPermission"
          },
          "setting": {
            "$ref": "#/components/schemas/AppSetting"
          }
        },
        "required": [
          "groupId",
          "displayName",
          "description",
          "permission",
          "setting"
        ]
      },
      "CommunicationMethod": {
        "type": "integer",
        "title": "CommunicationMethod",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "description": "Used to indicate preference/result method of communication, default to SMS for preference.\n|Value|Meaning|\n|-|-|\n|0|Unknown/Not Communicated|\n|1|SMS|\n|2|Email|\n|3|Phone Call|",
        "default": 1
      },
      "CommunicationMethodPhoneOnly": {
        "type": "integer",
        "title": "CommunicationMethodPhoneOnly",
        "description": "Partial \"CommunicationMethod\", default would be SMS\n\n|Value|Meaning|\n|-|-|\n|1|SMS|\n|3|Phone Call|",
        "enum": [
          1,
          3
        ],
        "default": 1
      },
      "QueryParam": {
        "title": "QueryParam",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 0,
            "description": "if not set, then there would be no limit"
          },
          "offset": {
            "type": "integer",
            "description": "if not set, this would default to 0. Negative values mean query from the back (-1 means start from the last element)"
          }
        }
      },
      "UserSystemToken": {
        "title": "UserSystemToken",
        "type": "object",
        "description": "",
        "properties": {
          "userToken": {
            "type": "string",
            "minLength": 128,
            "maxLength": 128
          },
          "expiresIn": {
            "type": "integer",
            "minimum": 0,
            "description": "in seconds"
          },
          "refreshToken": {
            "type": "string",
            "minLength": 256,
            "maxLength": 256
          },
          "refreshExpiresIn": {
            "type": "integer",
            "minimum": 0,
            "description": "in seconds"
          }
        },
        "required": [
          "userToken",
          "expiresIn",
          "refreshToken",
          "refreshExpiresIn"
        ]
      },
      "OAuthScope": {
        "type": "string",
        "title": "OAuthScope",
        "description": "This model describes all possible scopes",
        "enum": [
          "basic-info",
          "send-email",
          "send-sms",
          "send-phone"
        ]
      },
      "OAuthRecord": {
        "title": "OAuthRecord",
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "uid": {
            "type": [
              "string",
              "integer"
            ]
          },
          "scope": {
            "type": "array",
            "description": "Required if `grant_type` is `authorization_code` (if uid is present here)",
            "items": {
              "$ref": "#/components/schemas/OAuthScope"
            }
          },
          "frozen": {
            "type": "boolean",
            "description": "If the authorization is frozen (user can no longer authorize the app and the app can no longer request for oauth token for the user)",
            "default": false
          }
        },
        "required": [
          "appId",
          "uid"
        ]
      }
    },
    "securitySchemes": {
      "oauth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "scopes": {
              "basic_info": "Read basic info about user (`BasicUserInfo`)",
              "send_sms": "Send SMS to user",
              "send_email": "Send email to user",
              "send_phone": "Send phone call to user"
            },
            "authorizationUrl": "/oauth2/authorize",
            "refreshUrl": "/oauth2/token",
            "tokenUrl": "/oauth2/token"
          },
          "clientCredentials": {
            "tokenUrl": "/oauth2/token",
            "refreshUrl": "/oauth2/token",
            "scopes": {}
          }
        },
        "description": "OAuth Tokens are 64 characters, include them in Bearer Auth as well"
      },
      "userToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "User Token is 128 characters"
      }
    },
    "responses": {},
    "parameters": {}
  }
}